I"K<p>在上一小节中简单的介绍了函数的基本用法，这小节将继续介绍关于函数的用法和技巧。本小节将主要介绍<code class="language-plaintext highlighter-rouge">匿名函数</code>、<code class="language-plaintext highlighter-rouge">三元表达式</code>、<code class="language-plaintext highlighter-rouge">map</code>、<code class="language-plaintext highlighter-rouge">reduce</code>、<code class="language-plaintext highlighter-rouge">filter</code>。</p>

<h1 id="1匿名函数">1.匿名函数</h1>

<p><code class="language-plaintext highlighter-rouge">匿名函数</code>顾名思义就是定义一个没有名字的函数。在<code class="language-plaintext highlighter-rouge">javascript</code>中的匿名函数是这样创建的。</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="kd">function</span> <span class="p">(){</span> 
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">hello world!</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">})()</span>
</code></pre></div></div>
<p>python中定义匿名函数需要使用关键字<code class="language-plaintext highlighter-rouge">lambda</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 定义
</span><span class="k">lambda</span> <span class="n">parameter_list</span><span class="p">:</span> <span class="n">expression</span>

<span class="c1">#示例
</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</code></pre></div></div>
<p>需要注意的是，匿名函数<code class="language-plaintext highlighter-rouge">expression</code>是一个<code class="language-plaintext highlighter-rouge">表达式</code>，不是代码语句。也不用写<code class="language-plaintext highlighter-rouge">return</code>，返回值就是该表达式的结果。</p>

<h4 id="匿名函数调用">匿名函数调用</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="mi">3</span>
</code></pre></div></div>
<p>这样的写法虽然能够调用<code class="language-plaintext highlighter-rouge">匿名函数</code>，但是完全没有体现出匿名函数的优势，建议不要这么使用。后面会介绍<code class="language-plaintext highlighter-rouge">lambda</code>配合<code class="language-plaintext highlighter-rouge">map</code>、<code class="language-plaintext highlighter-rouge">reduce</code>、<code class="language-plaintext highlighter-rouge">filter</code>使用。</p>

<h1 id="2三元表达式">2.三元表达式</h1>

<p>三元运算符通常在Python里被称为条件表达式，这些表达式基于真(true)/假(not)的条件判断，在Python 2.4以上才有了三元操作。三元表达式可以用<code class="language-plaintext highlighter-rouge">if</code>代替，但是if不如三元表达式<code class="language-plaintext highlighter-rouge">简洁</code></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//js中的三元表达式</span>
<span class="nx">a</span> <span class="o">&gt;</span> <span class="nx">b</span><span class="p">?</span> <span class="nx">a</span> <span class="p">:</span> <span class="nx">b</span><span class="p">;</span>
</code></pre></div></div>

<p>python中的三元表达式:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># python中的三元表达式
</span><span class="n">a</span> <span class="k">if</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span> <span class="k">else</span> <span class="n">b</span>

<span class="c1">#用if代替
</span>
<span class="k">if</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">a</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">b</span>
</code></pre></div></div>
<p>显然用<code class="language-plaintext highlighter-rouge">三元表达式</code>会比用<code class="language-plaintext highlighter-rouge">if</code>简洁许多，三元表达式一般和<code class="language-plaintext highlighter-rouge">lambda</code>配合使用。说实话小菜第一次用python中的三元表达式感觉好别扭，也有可能是其他语言用习惯了。慢慢习惯吧！</p>

<h1 id="3map">3.map</h1>

<p><code class="language-plaintext highlighter-rouge">Iterable</code>: 可迭代的,可迭代的就是逻辑上是“一排”的东西，比如列表、字典、元组都是iterable。</p>

<p><code class="language-plaintext highlighter-rouge">Iterator</code>: 迭代器，iterator对象在迭代过程中提供返回的值。</p>

<p>如果想了解这两个概念，请阅读<a href="https://python.freelycode.com/contribution/detail/117" title="https://python.freelycode.com/contribution/detail/117" target="_blank">Python的Iterable和Iterator</a></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">map</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="o">*</span><span class="n">iterables</span><span class="p">)</span> <span class="o">--&gt;</span><span class="nb">map</span> <span class="n">Object</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">map</code>不是一个函数，而是一个类，接收一个函数和一个可迭代的(集合，列表)。map会根据提供的函数对指定序列做映射,返回一个map对象。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 求一组数的平方
</span><span class="k">def</span> <span class="nf">square</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span>

<span class="n">list_x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">]</span>
<span class="n">list_y</span> <span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="n">square</span><span class="p">,</span> <span class="n">list_x</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">list_y</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">36</span><span class="p">,</span><span class="mi">49</span><span class="p">]</span>
</code></pre></div></div>

<p>我们用<code class="language-plaintext highlighter-rouge">lambda</code>来写一下上面的功能</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">list_x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">]</span>
<span class="n">list_y</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span><span class="p">,</span> <span class="n">list_x</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">list_y</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">36</span><span class="p">,</span><span class="mi">49</span><span class="p">]</span>
</code></pre></div></div>
<p>是不是变得简洁了许多，这也是<code class="language-plaintext highlighter-rouge">lambda</code>推荐的用法。</p>

<h4 id="传多个参数">传多个参数</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">list_x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">]</span>
<span class="n">list_y</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">]</span>

<span class="n">list_r</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">),</span> <span class="n">list_x</span><span class="p">,</span> <span class="n">list_y</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">list_r</span>
<span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,,</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">14</span><span class="p">]</span>
</code></pre></div></div>
<p>大家可以将<code class="language-plaintext highlighter-rouge">list_x</code>或<code class="language-plaintext highlighter-rouge">list_y</code>中的列表长度不一致时，看看会发生什么事情。</p>

<h1 id="4reduce">4.reduce</h1>

<p><code class="language-plaintext highlighter-rouge">reduce()</code> 函数会对参数序列中元素进行累积，使用<code class="language-plaintext highlighter-rouge">resuce</code>时需要导入<code class="language-plaintext highlighter-rouge">from functools import reduce</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#语法
</span><span class="nb">reduce</span><span class="p">(</span><span class="n">function</span><span class="p">,</span> <span class="n">iterable</span><span class="p">[,</span> <span class="n">initializer</span><span class="o">=</span><span class="n">none</span><span class="p">])</span>
</code></pre></div></div>

<p>参数：</p>
<ul>
  <li>function – 函数，必须有两个参数</li>
  <li>iterable – 可迭代对象</li>
  <li>initializer – 可选，初始参数</li>
</ul>

<h4 id="求一组列表的和">求一组列表的和</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="nb">reduce</span>

<span class="n">list_x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span>
<span class="n">list_y</span> <span class="o">=</span> <span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">,</span> <span class="n">list_x</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">list_y</span>
<span class="mi">45</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">reduce</code>函数必须要传入2个参数，第1次运行时，由于只传了一个参数，所以会将<code class="language-plaintext highlighter-rouge">list_x</code>的第2项作为参数传入(1 + 2),第2次运行时，将上一次的结果作为参数传入(3 + 3),后面以此类推</p>

<h4 id="添加初始值">添加初始值</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="nb">reduce</span>

<span class="n">list_x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span>
<span class="n">list_y</span> <span class="o">=</span> <span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">,</span> <span class="n">list_x</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">list_y</span>
<span class="mi">55</span>
</code></pre></div></div>
<p>reduce如果添加了第三个参数，第1次运行时，取<code class="language-plaintext highlighter-rouge">list_x</code>第一个值和<code class="language-plaintext highlighter-rouge">initializer</code>作为参数传入(1 + 10)，第2次运行时，将上一次的结果作为参数传入(11 + 2),后面以此类推</p>

<h1 id="5filter">5.filter</h1>

<p><code class="language-plaintext highlighter-rouge">filter()</code>函数用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#定义
</span><span class="nb">filter</span><span class="p">(</span><span class="n">function</span><span class="p">,</span> <span class="n">iterable</span><span class="p">)</span>
</code></pre></div></div>

<p>参数：</p>
<ul>
  <li>function – 判断函数,函数返回值必须能够判断真和假</li>
  <li>iterable – 可迭代对象</li>
</ul>

<h4 id="示例">示例</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">list_x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span>
<span class="n">list_y</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="bp">True</span> <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">else</span> <span class="bp">False</span><span class="p">),</span><span class="n">list_x</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">list_y</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>

<span class="c1">#或者
</span><span class="n">list_y</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">),</span><span class="n">list_x</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">list_y</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>

<p>第2种方式比较简洁，因为<code class="language-plaintext highlighter-rouge">1</code>和<code class="language-plaintext highlighter-rouge">0</code>在python中转成boolean时，能够代表<code class="language-plaintext highlighter-rouge">True</code>和<code class="language-plaintext highlighter-rouge">False</code>。注意函数返回值一定要能够判断<code class="language-plaintext highlighter-rouge">真</code>和<code class="language-plaintext highlighter-rouge">假</code>。</p>

:ET