I"Qk<p>DLL(Dynamic Link Library)文件为动态链接库文件,在Windows中，许多应用程序并不是一个完整的可执行文件，它们被分割成一些相对独立的动态链接库，即DLL文件，放置于系统中。当我们执行某一个程序时，相应的DLL文件就会被调用。</p>

<p>之前我们所有第三方库都是打包在<code class="language-plaintext highlighter-rouge">vendors</code>文件中，形式<code class="language-plaintext highlighter-rouge">vendors~[hash].js</code>，每次打包时，都要重新分析这样会影响打包速度。我们知道像这种第三方模块代码基本不会变的，对第三方代码做优化，可以把第三方插件单独打包生成一个文件，只在第一次打包时分析，之后再做打包时利用上一次分析的结果，这样就可以提高webpack打包速度。</p>

<h1 id="1文件结构">1.文件结构</h1>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">myProject
</span><span class="err">|-build</span>
   |-base
       |-path.js
       |-config.js
   |-mode.js
   |-entry.js
   |-devtool.js
   |-module.js
   |-plugins.js
   |-devServer.js
   |-optimization.js
   |-output.js
   |-resolve.js
 |-dist
 |-node_modules
 |-src
    |-api
        |-apiPath.js
     |-util
        |-math.js
     |-assets
        |-css
            |-index.css
        |-less
            |-index.less     
        |-sass
            |-index.scss
        |-images
            |-wali_logo.png
     |-index.html
     |-index.js
 |-package.json
 |-webpack.config.js
<span class="gi">+|-webpack.dll.js
</span> |-postcss.config.js
 |-.babelrc
 |-.eslintignore
 |-.eslintrc.js
 |-package-lock.json
 |-stats.json
</code></pre></div></div>

<h4 id="安装jquery">安装jquery</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add jquery
</code></pre></div></div>

<h4 id="webpackdlljs">webpack.dll.js</h4>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">path</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">CleanWebpackPlugin</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">clean-webpack-plugin</span><span class="dl">'</span><span class="p">);</span>  <span class="c1">//清除</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">mode</span><span class="p">:</span><span class="dl">"</span><span class="s2">production</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">entry</span><span class="p">:{</span>
        <span class="na">vendors</span><span class="p">:[</span><span class="dl">'</span><span class="s1">loadsh</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">jquery</span><span class="dl">'</span><span class="p">]</span>
    <span class="p">},</span>
    <span class="na">plugin</span><span class="p">:[</span>
        <span class="k">new</span> <span class="nx">CleanWebpackPlugin</span><span class="p">()</span>
    <span class="p">],</span>
    <span class="na">output</span><span class="p">:{</span>
        <span class="na">path</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="dl">'</span><span class="s1">dll</span><span class="dl">'</span><span class="p">),</span>
        <span class="na">filename</span><span class="p">:</span><span class="dl">'</span><span class="s1">[name].dll.js</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">library</span><span class="p">:</span> <span class="dl">'</span><span class="s1">[name]</span><span class="dl">'</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<h4 id="packagejson">package.json</h4>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">...</span>
"scripts": {
    "dev": "npx webpack-dev-server --colors --mode=development",
    "prod": "npx webpack --colors --mode=production",
    "build": "npx webpack --colors --mode=development",
    "analyse": "npx webpack --profile --json&gt; stats.json --colors  --mode=development",
<span class="gi">+    "dll": "npx webpack --config webpack.dll.js --mode=production --colors"
</span>  },
<span class="err">...</span>
</code></pre></div></div>

<h4 id="运行dll命令">运行dll命令</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn run dll
</code></pre></div></div>

<p>在项目下生成<code class="language-plaintext highlighter-rouge">dll/vendors.dll.js</code>文件，就是将loadsh和jquery打包在一起并暴露出去。</p>

<h4 id="测试dll">测试dll</h4>

<p>在dll目录下新建一个<code class="language-plaintext highlighter-rouge">dll.html</code></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
	<span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
	<span class="nt">&lt;title&gt;</span>Document<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
	
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"./vendors.dll.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div></div>

<p>用浏览器打开<code class="language-plaintext highlighter-rouge">dll.html</code>，在控制台中直接可以使用<code class="language-plaintext highlighter-rouge">$</code>,<code class="language-plaintext highlighter-rouge">_</code>证明将<code class="language-plaintext highlighter-rouge">loadsh</code>和<code class="language-plaintext highlighter-rouge">jquery</code>打包到一个文件并暴露出去。</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">_</span><span class="p">.</span><span class="nx">join</span><span class="p">([</span><span class="dl">'</span><span class="s1">欢迎</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">来到</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">瓦力</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">博客</span><span class="dl">'</span><span class="p">],</span><span class="dl">'</span><span class="s1">+</span><span class="dl">'</span><span class="p">);</span>
<span class="c1">//"欢迎+来到+瓦力+博客"</span>

<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">body</span><span class="dl">'</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="2项目中使用dll">2.项目中使用dll</h1>

<p>第一步我们已经将第三方打包成一个文件，那么我们在项目中如何使用呢？</p>

<h4 id="安装add-asset-html-webpack-plugin">安装add-asset-html-webpack-plugin</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add add-asset-html-webpack-plugin
</code></pre></div></div>

<h4 id="buildbasepathjs">build/base/path.js</h4>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">const path = require('path');   
</span>
let dirPath = {};
<span class="p">dirPath.rootDir = path.resolve(__dirname, '../../');   //根路径
dirPath.nodeModule = path.resolve(dirPath.rootDir, './node_modules');  //包路径
dirPath.src = path.resolve(dirPath.rootDir,'./src');   //源文件
dirPath.dist = path.resolve(dirPath.rootDir,'./dist'); //生成线上
</span><span class="gi">+ dirPath.dll = path.resolve(dirPath.rootDir,'./dll');   //dll目录
</span>
dirPath.assets = 'assets';               //静态资源
<span class="p">dirPath.css = 'assets/css';              //css
dirPath.sass = 'assets/sass'             //sass
dirPath.less = 'assets/less';            //less
dirPath.images = 'assets/images';        //images
dirPath.iconfont = 'assets/iconfont';    //iconfont
</span>

<span class="err">//将srcPath</span> 挂载出去
<span class="p">module.exports = dirPath;
</span></code></pre></div></div>

<h4 id="buildpulginjs">build/pulgin.js</h4>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">const dirpath = require('./base/path');
const config = require('./base/config');
</span>
const webpack = require('webpack');
<span class="p">const HtmlWebpackPlugin = require('html-webpack-plugin');    //生成html文件
const { CleanWebpackPlugin } = require('clean-webpack-plugin');  //清除
const MiniCssExtractPlugin = require("mini-css-extract-plugin");  //css样式提取
</span><span class="gi">+ const AddAssetHtmlPlugin = require('add-asset-html-webpack-plugin');
</span>

<span class="p">let plugins = [
</span>	new HtmlWebpackPlugin({
		title: '瓦力博客',
		template: dirpath.src + '/index.html'   //以src/index.html为编译模板
	}),
<span class="gi">+	new AddAssetHtmlPlugin({
+		filepath: dirpath.dll + '/vendors.dll.js'
+	}),
</span>	new  MiniCssExtractPlugin({
		filename: config.NODE_ENV == 'development'?'[name.css]': `${dirpath.css}/[name].[hash].css`,
		chunkFilename: config.NODE_ENV == 'development'?'[id].css': `${dirpath.css}/[id].[hash].css`
	}),   //css提取
	new webpack.ProvidePlugin({
		_:'loadsh',
		url: ['../src/api/apipath', 'url']
	}),
	new webpack.DefinePlugin({ 
		IS_PRODUCTION: config.NODE_ENV == 'development'?JSON.stringify(false):JSON.stringify(true),
	}),
	new CleanWebpackPlugin()
<span class="err">]</span>

<span class="p">if('development' == config.NODE_ENV){
</span>	plugins.push(new webpack.HotModuleReplacementPlugin());
<span class="err">}</span>

<span class="p">module.exports = plugins;
</span></code></pre></div></div>

<h4 id="运行build">运行build</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn run build
</code></pre></div></div>

<p>在dist目录下打开<code class="language-plaintext highlighter-rouge">index.html</code>,看到<code class="language-plaintext highlighter-rouge">vendros.dll.js</code>已经被添加进去了</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span>title<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
<span class="nt">&lt;h1&gt;</span>欢迎来到瓦力博客<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"iconfont wali-icon-fuzhi"</span><span class="nt">&gt;&lt;/span&gt;</span>
<span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"assets/images/wali_logo2BQg9e7.png"</span> <span class="na">alt=</span><span class="s">""</span><span class="nt">&gt;</span>
<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"/vendors.dll.js"</span><span class="nt">&gt;&lt;/script&gt;&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"/runtimechunk~main.js"</span><span class="nt">&gt;&lt;/script&gt;&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"/main.js"</span><span class="nt">&gt;&lt;/script&gt;&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<h1 id="3webpack引入dll文件">3.webpack引入dll文件</h1>

<p>我们已经将第三方模块<code class="language-plaintext highlighter-rouge">loadsh</code>、<code class="language-plaintext highlighter-rouge">jquery</code>打包到了vendors变量中，但是在</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
</span><span class="nl">"dev"</span><span class="p">:</span><span class="w"> </span><span class="s2">"npx webpack-dev-server --colors --mode=development"</span><span class="p">,</span><span class="w">
</span><span class="nl">"prod"</span><span class="p">:</span><span class="w"> </span><span class="s2">"npx webpack --colors --mode=production"</span><span class="p">,</span><span class="w">
</span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"npx webpack --colors --mode=development"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p>还没有使用<code class="language-plaintext highlighter-rouge">vendors</code>第三方模块，还是使用的是<code class="language-plaintext highlighter-rouge">node_module</code>里的第三方模块，为了能让上面的命令运行使用我们自己打包第三方库，需要添加映射关系</p>

<h4 id="webpackdlljs-1">webpack.dll.js</h4>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">const path = require('path');
</span><span class="gi">+ const webpack = require('webpack');
</span><span class="p">const { CleanWebpackPlugin } = require('clean-webpack-plugin');  //清除
</span>
module.exports = {
    mode:"production",
    entry:{
        vendors:['loadsh','jquery']
    },
    plugins:[
        new CleanWebpackPlugin(),
<span class="gi">+        new webpack.DllPlugin({
+            context: __dirname,
+            name: '[name]',
+            path: path.join(__dirname, 'dll', '[name].manifest.json')
+        })
</span>    ],
    output:{
        path: path.resolve(__dirname, 'dll'),
        filename:'[name].dll.js',
        library: '[name]'
    }
<span class="err">}</span>
</code></pre></div></div>

<h4 id="运行dll">运行dll</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn run dll
</code></pre></div></div>

<p>检查<code class="language-plaintext highlighter-rouge">dll</code>目录下面有没有<code class="language-plaintext highlighter-rouge">vendors.manifest.json</code>文件生成，有就证明映射关系生成好了，没有生成<code class="language-plaintext highlighter-rouge">vendors.manifest.json</code>检查下配置是否正确</p>

<h4 id="buildpluginjs">build/plugin.js</h4>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">const dirpath = require('./base/path');
const config = require('./base/config');
</span>
const webpack = require('webpack');
<span class="p">const HtmlWebpackPlugin = require('html-webpack-plugin');    //生成html文件
const { CleanWebpackPlugin } = require('clean-webpack-plugin');  //清除
const MiniCssExtractPlugin = require("mini-css-extract-plugin");  //css样式提取
const AddAssetHtmlPlugin = require('add-asset-html-webpack-plugin');
</span>

<span class="p">let plugins = [
</span>	new HtmlWebpackPlugin({
		title: '瓦力博客',
		template: dirpath.src + '/index.html'   //以src/index.html为编译模板
	}),
	new AddAssetHtmlPlugin({
		filepath: dirpath.dll + '/vendors.dll.js'
	}),
<span class="gi">+	new webpack.DllReferencePlugin({
+		manifest: dirpath.dll + '/vendros.manifest.json'
+	}),
</span>	new  MiniCssExtractPlugin({
		filename: config.NODE_ENV == 'development'?'[name.css]': `${dirpath.css}/[name].[hash].css`,
		chunkFilename: config.NODE_ENV == 'development'?'[id].css': `${dirpath.css}/[id].[hash].css`
	}),   //css提取
	new webpack.ProvidePlugin({
		_:'loadsh',
		url: ['../src/api/apipath', 'url']
	}),
	new webpack.DefinePlugin({ 
		IS_PRODUCTION: config.NODE_ENV == 'development'?JSON.stringify(false):JSON.stringify(true),
	}),
	new CleanWebpackPlugin()
<span class="err">]</span>

<span class="p">if('development' == config.NODE_ENV){
</span>	plugins.push(new webpack.HotModuleReplacementPlugin());
<span class="err">}</span>

<span class="p">module.exports = plugins;
</span></code></pre></div></div>

<h4 id="运行prod">运行prod</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn run prod
</code></pre></div></div>

<p><img src="http://walidream.com:9999/blogImage/webpack/webpack_50.png" alt="ssl" /></p>

<h4 id="注释buildpluginjs">注释build/plugin.js</h4>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">const dirpath = require('./base/path');
const config = require('./base/config');
</span>
const webpack = require('webpack');
<span class="p">const HtmlWebpackPlugin = require('html-webpack-plugin');    //生成html文件
const { CleanWebpackPlugin } = require('clean-webpack-plugin');  //清除
const MiniCssExtractPlugin = require("mini-css-extract-plugin");  //css样式提取
const AddAssetHtmlPlugin = require('add-asset-html-webpack-plugin');
</span>

<span class="p">let plugins = [
</span>	new HtmlWebpackPlugin({
		title: '瓦力博客',
		template: dirpath.src + '/index.html'   //以src/index.html为编译模板
	}),
	new AddAssetHtmlPlugin({
		filepath: dirpath.dll + '/vendors.dll.js'
	}),
<span class="gd">-	new webpack.DllReferencePlugin({
-		manifest: dirpath.dll + '/vendros.manifest.json'
-	}),
</span>	new  MiniCssExtractPlugin({
		filename: config.NODE_ENV == 'development'?'[name.css]': `${dirpath.css}/[name].[hash].css`,
		chunkFilename: config.NODE_ENV == 'development'?'[id].css': `${dirpath.css}/[id].[hash].css`
	}),   //css提取
	new webpack.ProvidePlugin({
		_:'loadsh',
		url: ['../src/api/apipath', 'url']
	}),
	new webpack.DefinePlugin({ 
		IS_PRODUCTION: config.NODE_ENV == 'development'?JSON.stringify(false):JSON.stringify(true),
	}),
	new CleanWebpackPlugin()
<span class="err">]</span>

<span class="p">if('development' == config.NODE_ENV){
</span>	plugins.push(new webpack.HotModuleReplacementPlugin());
<span class="err">}</span>

<span class="p">module.exports = plugins;
</span></code></pre></div></div>

<h4 id="运行prod-1">运行prod</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn run prod
</code></pre></div></div>

<p><img src="http://walidream.com:9999/blogImage/webpack/webpack_51.png" alt="ssl" /></p>

<p>从上面两张截图中可以比较出来，dll提高了打包构建的速度。</p>

<h1 id="4dll文件分组">4.dll文件分组</h1>

<p>上面的配置中</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">entry</span><span class="p">:{</span>
    <span class="nl">vendors</span><span class="p">:[</span><span class="dl">'</span><span class="s1">loadsh</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">jquery</span><span class="dl">'</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>
<p>我们在实际项目中用到的第三方模块可能更多如<code class="language-plaintext highlighter-rouge">vue</code>,<code class="language-plaintext highlighter-rouge">vue-router</code>等等。全部打包到一个文件也不是很合适。</p>

<h4 id="安装vuevue-router">安装vue,vue-router</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add vue
yarn add vue-router
</code></pre></div></div>

<h4 id="webpackdlljs-2">webpack.dll.js</h4>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">const path = require('path');
const webpack = require('webpack');
const { CleanWebpackPlugin } = require('clean-webpack-plugin');  //清除
</span>
module.exports = {
    mode:"production",
    entry:{
        vendors: ['loadsh','jquery'],
<span class="gi">+        vue: ['vue', 'vue-router']
</span>    },
    plugins:[
        new CleanWebpackPlugin(),
        new webpack.DllPlugin({
            context: __dirname,
            name: '[name]',
            path: path.join(__dirname, 'dll', '[name].manifest.json')
        })
    ],
    output:{
        path: path.resolve(__dirname, 'dll'),
        filename:'[name].dll.js',
        library: '[name]'
    }
<span class="err">}</span>
</code></pre></div></div>

<h4 id="运行dll-1">运行dll</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn run dll
</code></pre></div></div>

<p><img src="http://walidream.com:9999/blogImage/webpack/webpack_52.png" alt="ssl" /></p>

<p>生成了两个dll和对应manifest.json文件，所以在引用的时候也要引入多个</p>

<h4 id="buildpluginjs-1">build/plugin.js</h4>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">const dirpath = require('./base/path');
const config = require('./base/config');
</span>
const webpack = require('webpack');
<span class="p">const HtmlWebpackPlugin = require('html-webpack-plugin');    //生成html文件
const { CleanWebpackPlugin } = require('clean-webpack-plugin');  //清除
const MiniCssExtractPlugin = require("mini-css-extract-plugin");  //css样式提取
const AddAssetHtmlPlugin = require('add-asset-html-webpack-plugin');
</span>

<span class="p">let plugins = [
</span>	new HtmlWebpackPlugin({
		title: '瓦力博客',
		template: dirpath.src + '/index.html'   //以src/index.html为编译模板
	}),
	new AddAssetHtmlPlugin({
		filepath: dirpath.dll + '/vendors.dll.js'
	}),
	new webpack.DllReferencePlugin({
		manifest: dirpath.dll + '/vendors.manifest.json'
	}),
<span class="gi">+    new AddAssetHtmlPlugin({
+		filepath: dirpath.dll + '/vue.dll.js'
+	}),
+    new webpack.DllReferencePlugin({
+		manifest: dirpath.dll + '/vue.manifest.json'
+	}),
</span>	new  MiniCssExtractPlugin({
		filename: config.NODE_ENV == 'development'?'[name.css]': `${dirpath.css}/[name].[hash].css`,
		chunkFilename: config.NODE_ENV == 'development'?'[id].css': `${dirpath.css}/[id].[hash].css`
	}),   //css提取
	new webpack.ProvidePlugin({
		_:'loadsh',
		url: ['../src/api/apipath', 'url']
	}),
	new webpack.DefinePlugin({ 
		IS_PRODUCTION: config.NODE_ENV == 'development'?JSON.stringify(false):JSON.stringify(true),
	}),
	new CleanWebpackPlugin()
<span class="err">]</span>

<span class="p">if('development' == config.NODE_ENV){
</span>	plugins.push(new webpack.HotModuleReplacementPlugin());
<span class="err">}</span>

<span class="p">module.exports = plugins;
</span></code></pre></div></div>

<h1 id="5自动添加dll">5.自动添加dll</h1>

<p>上一步，我们每新建一个dll分组，就需要在<code class="language-plaintext highlighter-rouge">plugins</code>中添加<code class="language-plaintext highlighter-rouge">new AddAssetHtmlPlugin</code> 和 <code class="language-plaintext highlighter-rouge">new webpack.DllReferencePlugin</code>。当一个项目用的第三方模块稍微多一点的时候，那么手动添加<code class="language-plaintext highlighter-rouge">new AddAssetHtmlPlugin</code> 和 <code class="language-plaintext highlighter-rouge">new webpack.DllReferencePlugin</code>添加也会越来越多。下面我们来将这块代码优化下，实现不管添加多少个模块，我们让代码自动帮助我们添加到<code class="language-plaintext highlighter-rouge">plugins</code>中。</p>

<h4 id="buildpluginjs-2">build/plugin.js</h4>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">const dirpath = require('./base/path');
const config = require('./base/config');
</span>
const webpack = require('webpack');
<span class="p">const HtmlWebpackPlugin = require('html-webpack-plugin');    //生成html文件
const { CleanWebpackPlugin } = require('clean-webpack-plugin');  //清除
const MiniCssExtractPlugin = require("mini-css-extract-plugin");  //css样式提取
const AddAssetHtmlPlugin = require('add-asset-html-webpack-plugin');
</span><span class="gi">+ const fs = require('fs');
</span>


let plugins = [
	new HtmlWebpackPlugin({
		title: '瓦力博客',
		template: dirpath.src + '/index.html'   //以src/index.html为编译模板
	}),
<span class="gd">-	new AddAssetHtmlPlugin({
-		filepath: dirpath.dll + '/vendors.dll.js'
-	}),
-	new webpack.DllReferencePlugin({
-		manifest: dirpath.dll + '/vendors.manifest.json'
-	}),
-   new AddAssetHtmlPlugin({
-		filepath: dirpath.dll + '/vue.dll.js'
-	}),
-   new webpack.DllReferencePlugin({
-		manifest: dirpath.dll + '/vue.manifest.json'
-	}),
</span>	new  MiniCssExtractPlugin({
		filename: config.NODE_ENV == 'development'?'[name.css]': `${dirpath.css}/[name].[hash].css`,
		chunkFilename: config.NODE_ENV == 'development'?'[id].css': `${dirpath.css}/[id].[hash].css`
	}),   //css提取
	new webpack.ProvidePlugin({
		_:'loadsh',
		url: ['../src/api/apipath', 'url']
	}),
	new webpack.DefinePlugin({ 
		IS_PRODUCTION: config.NODE_ENV == 'development'?JSON.stringify(false):JSON.stringify(true),
	}),
	new CleanWebpackPlugin()
<span class="err">]</span>

<span class="gi">+ let files = fs.readdirSync(dirpath.dll);
+ files.forEach(val=&gt;{
+	if(/\.js$/.test(val)){
+		plugins.push(new AddAssetHtmlPlugin({ 
+			filepath: `${dirpath.dll}/${val}`
+		}))		
+	}
+
+	if(/\.json$/.test(val)){
+		plugins.push(new webpack.DllReferencePlugin({
+			manifest: `${dirpath.dll}/${val}`
+		}))
+	}
+ })
</span>

<span class="p">if('development' == config.NODE_ENV){
</span>	plugins.push(new webpack.HotModuleReplacementPlugin());
<span class="err">}</span>

<span class="p">module.exports = plugins;
</span>
</code></pre></div></div>

<h4 id="运行build-1">运行build</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn run build
</code></pre></div></div>

<p>在<code class="language-plaintext highlighter-rouge">dist</code>目录中检查html文件是否引入<code class="language-plaintext highlighter-rouge">vendors</code>和<code class="language-plaintext highlighter-rouge">vue</code>。如果引入了，证明这块代码没问题了。</p>

:ET