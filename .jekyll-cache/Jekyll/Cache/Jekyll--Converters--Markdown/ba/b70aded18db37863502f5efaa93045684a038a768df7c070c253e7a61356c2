I" ;<p>小菜之前写过关于浏览器是如何缓存的<a href="/nginx/2018/12/14/nginx-11.html" title="/nginx/2018/12/14/nginx-11.html" target="_blank">nginx 缓存</a>,感兴趣的小伙伴们可以看看。在前面小菜写的配置都是如何去缓存</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//build/output.js</span>

<span class="kd">const</span> <span class="nx">srcPath</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./base/path</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./base/config</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">let</span> <span class="nx">output</span> <span class="o">=</span> <span class="p">{</span>
	<span class="na">path</span><span class="p">:</span> <span class="nx">srcPath</span><span class="p">.</span><span class="nx">dist</span><span class="p">,</span>
	<span class="na">filename</span><span class="p">:</span> <span class="dl">'</span><span class="s1">[name].[hash].js</span><span class="dl">'</span><span class="p">,</span>
	<span class="na">publicPath</span><span class="p">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">publicPath</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">output</span><span class="p">;</span>
</code></pre></div></div>

<p>如果<code class="language-plaintext highlighter-rouge">output.js</code>中这样写<code class="language-plaintext highlighter-rouge">filename:'[name].[hash].js'</code>，每次打包都会重新生成js文件(文件名不重名)，上传到服务器，用户在客户端上刷新都会重新从服务器上拉取js文件，这样就会造成请求资源浪费。</p>

<h1 id="1演示">1.演示</h1>

<h4 id="安装loadsh">安装loadsh</h4>

<p>之前没有安装过loadsh库伙伴需要安装一下</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add loadsh
</code></pre></div></div>

<h4 id="indexjs">index.js</h4>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">_</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">loadsh</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">world</span><span class="dl">'</span><span class="p">];</span>

<span class="kd">let</span> <span class="nx">str</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span><span class="dl">'</span><span class="s1">--</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="编译webpack">编译webpack</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn run prod
</code></pre></div></div>

<p><img src="http://walidream.com:9999/blogImage/webpack/webpack_36.png" alt="ssl" /></p>

<h4 id="修改indexjs">修改index.js</h4>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">import _ from 'loadsh';
</span>
+  let arr = ['hello','wali'];

let str = _.join(arr,'--');
<span class="p">console.log(str)
</span></code></pre></div></div>

<h4 id="编译webpack-1">编译webpack</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn run prod
</code></pre></div></div>
<p><img src="http://walidream.com:9999/blogImage/webpack/webpack_37.png" alt="ssl" /></p>

<p>从上面两个截图可以发现，当我们修改index.js文件的代码后，重新打包生成<code class="language-plaintext highlighter-rouge">main.js</code>和<code class="language-plaintext highlighter-rouge">vendors~main</code>后面的hash值变了。因为我们修改<code class="language-plaintext highlighter-rouge">index.js</code>文件的代码，在<code class="language-plaintext highlighter-rouge">index.js</code>中引用的第三方库文件，<code class="language-plaintext highlighter-rouge">loadsh</code>是不需修改的,所以打包后我们希望<code class="language-plaintext highlighter-rouge">mian.js</code>的hash值变，而<code class="language-plaintext highlighter-rouge">vendors~main</code>的hash值不变。</p>

<h1 id="2配置webpack">2.配置webpack</h1>

<p>为了实现上面的功能，我们需要对webpack配置做一些改变</p>

<h4 id="buildoutputjs">build/output.js</h4>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">const dirPath = require('./base/path');
const config = require('./base/config');
</span>
let output = {
	path:dirPath.dist,
<span class="gi">+	filename: config.NODE_ENV == 'development'?'[name].js':'[name].[contenthash].js',
+	chunkFilename: config.NODE_ENV == 'development'?'[name].js':'[name].[contenthash].js',
</span>	publicPath: config.publicPath
<span class="err">}</span>

<span class="p">module.exports = output
</span></code></pre></div></div>

<h4 id="buildoptimizationjs">build/optimization.js</h4>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">let optimization = {
</span>	usedExports: true,
	splitChunks: {
		chunks: 'all',
		minSize: 30000,
		maxSize: 0,
		minChunks: 1,
		maxAsyncRequests: 5,
		maxInitialRequests: 3,
		automaticNameDelimiter: '~',
		name: true,
		cacheGroups: {
			vendors: {
				test: /[\\/]node_modules[\\/]/,
				priority: -10
			},
			default: {
				minChunks: 2,
				priority: -20,
				reuseExistingChunk: true
			}
		}
	},
<span class="gi">+	runtimeChunk:{
+		name: entrypoint =&gt; `runtimechunk~${entrypoint.name}`
+	}
</span><span class="err">}</span>

<span class="p">module.exports = optimization
</span></code></pre></div></div>

<h4 id="buildpluginsjs">build/plugins.js</h4>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">const dirpath = require('./base/path');
const config = require('./base/config');
</span>
const webpack = require('webpack');
<span class="p">const HtmlWebpackPlugin = require('html-webpack-plugin');    //生成html文件
const { CleanWebpackPlugin } = require('clean-webpack-plugin');  //清除
const MiniCssExtractPlugin = require("mini-css-extract-plugin");  //css样式提取
</span>

<span class="p">let plugins = [
</span>	new HtmlWebpackPlugin({
		title: '瓦力博客',
		template: dirpath.src + '/index.html'   //以src/index.html为编译模板
	}),
	new  MiniCssExtractPlugin({
		filename: config.NODE_ENV == 'development'?'[name.css]': `${dirpath.css}/[name].[hash].css`,
		chunkFilename: config.NODE_ENV == 'development'?'[id].css': `${dirpath.css}/[id].[hash].css`
	}),   //css提取
	new CleanWebpackPlugin(),
<span class="gd">-	new webpack.HotModuleReplacementPlugin()	
</span><span class="err">]</span>

<span class="gi">+ if('development' == config.NODE_ENV){
+	plugins.push(new webpack.HotModuleReplacementPlugin());
+ }
</span>
module.exports = plugins;
</code></pre></div></div>

<h4 id="indexjs-1">index.js</h4>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">_</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">loadsh</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">world</span><span class="dl">'</span><span class="p">];</span>

<span class="kd">let</span> <span class="nx">str</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span><span class="dl">'</span><span class="s1">--</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="运行webpack">运行webpack</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn run prod
</code></pre></div></div>

<p><img src="http://walidream.com:9999/blogImage/webpack/webpack_38.png" alt="ssl" /></p>

<h4 id="修改indexjs-1">修改index.js</h4>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">import _ from 'loadsh';
</span>
+ let arr = ['hello','wali'];

let str = _.join(arr,'--');
<span class="p">console.log(str)
</span></code></pre></div></div>

<h4 id="运行webpack-1">运行webpack</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn run prod
</code></pre></div></div>

<p><img src="http://walidream.com:9999/blogImage/webpack/webpack_39.png" alt="ssl" /></p>

<p>从上面两张截图中可以看出来，当我们修改index.js文件内容。<code class="language-plaintext highlighter-rouge">main.js</code>后面的hash值发生改变，<code class="language-plaintext highlighter-rouge">vendors~main.js</code>后面hash值保持不变。当用户在浏览页面时，我们修改本地代码，打包上传后，用户刷新浏览器，浏览器只会请求hash改变的js文件，而hash值没变的文件依旧从浏览器缓存读取。</p>

<h1 id="3总结">3.总结</h1>

<p>写本小节的时候，小菜遇到了两个问题，分享给大家</p>

<h4 id="contenthash打包报错">[contenthash]打包报错</h4>

<p>小菜在调式时，直接在<code class="language-plaintext highlighter-rouge">build/output.js</code>文件中这样写</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">let output = {
</span>	path:dirPath.dist,
<span class="gi">+	filename: '[name].[contenthash].js',
+	chunkFilename: '[name].[contenthash].js',
</span>	publicPath: config.publicPath
<span class="err">}</span>
</code></pre></div></div>

<p>在运行<code class="language-plaintext highlighter-rouge">yarn run prod</code>报错，报错信息</p>

<pre><code class="language-txt">ERROR in chunk runtimechunk~main [entry]
[name].[contenthash].js
Cannot use [chunkhash] or [contenthash] for chunk in '[name].[contenthash].js' (use[hash] instead)
</code></pre>

<p>不能使用<code class="language-plaintext highlighter-rouge">[chunkhash]</code>或<code class="language-plaintext highlighter-rouge">[contenthash]</code>在网上找到资料<a href="https://stackoverflow.com/questions/50217480/cannot-use-chunkhash-or-contenthash-for-chunk-in-name-chunkhash-js-us" title="https://stackoverflow.com/questions/50217480/cannot-use-chunkhash-or-contenthash-for-chunk-in-name-chunkhash-js-us" target="_blank">解决连接</a>。在用<code class="language-plaintext highlighter-rouge">new webpack.HotModuleReplacementPlugin()</code>热更新插件的时候是不能使用<code class="language-plaintext highlighter-rouge">[chunkhash]</code>和<code class="language-plaintext highlighter-rouge">[contenthash]</code>，所以小菜<code class="language-plaintext highlighter-rouge">build/plugins.js</code>中修改配置，添加了判断，只有在<code class="language-plaintext highlighter-rouge">development</code>模式下才在使用<code class="language-plaintext highlighter-rouge">new webpack.HotModuleReplacementPlugin()</code>,然后在<code class="language-plaintext highlighter-rouge">output.js</code>中添加判断,问题就解决了</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">const dirPath = require('./base/path');
const config = require('./base/config');
</span>
let output = {
	path:dirPath.dist,
<span class="gi">+	filename: config.NODE_ENV == 'development'?'[name].js':'[name].[contenthash].js',
+	chunkFilename: config.NODE_ENV == 'development'?'[name].js':'[name].[contenthash].js',
</span>	publicPath: config.publicPath
<span class="err">}</span>

<span class="p">module.exports = output
</span></code></pre></div></div>

<h4 id="运行yarn-run-dev命令本地服务器不来">运行yarn run dev命令本地服务器不来</h4>

<p>说起来很搞笑，按道理到上面配置基本都没问题了，小菜就运行<code class="language-plaintext highlighter-rouge">yarn run dev</code>启动本地服务，发现页面起不来</p>

<p><img src="http://walidream.com:9999/blogImage/webpack/webpack_40.png" alt="ssl" /></p>

<p>　　　</p>

<p><img src="http://walidream.com:9999/blogImage/webpack/webpack_41.png" alt="ssl" /></p>

<p>这个问题排查了很久，最终发现小菜在<code class="language-plaintext highlighter-rouge">build/base/config.js</code>中将</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">let _mode = process.argv[process.argv.length - 1];
let env = _mode.replace(/--mode=(.+)/g,"$1");
</span>
let config = {
	NODE_ENV: env == 'development'?'development':'production',  //development 开发 production 线上
<span class="gd">-	publicPath: env == 'development'?'./':'http://www.waliblog.com',
</span><span class="gi">+	publicPath: env == 'development'?'/':'http://www.waliblog.com',
</span>	apiUrl:'http://www.waliblog.com',
	port: 9999
<span class="err">}</span>

<span class="p">module.exports = config;
</span></code></pre></div></div>
<p>本地服务路径<code class="language-plaintext highlighter-rouge">./</code>弄错了，所以服务起起来但是一直找不到根路径，页面也无法访问。当时这么写是因为想在生成<code class="language-plaintext highlighter-rouge">index.html</code>查看路径，后面一直没有改才会碰到这个问题。这个问题找到后，小菜将<a href="webpack/2019/05/28/webpack-14.html" title="webpack/2019/05/28/webpack-14.html" target="_blank">webpack-14</a>这节配置重新写了一遍，之后又重新跑了一遍，所以小伙伴们可能遇不到我这个问题。</p>

:ET