I"b<p>在之前有篇文章介绍了浏览器缓存，如果小伙伴不知道建议去看看<a href="/nginx/2018/12/14/nginx-11.html" title="/nginx/2018/12/14/nginx-11.html" target="_blank">传送门</a>。这篇文章
主要介绍nginx作为代理缓存。</p>

<h1 id="1nginx代理缓存">1.nginx代理缓存</h1>

<p><img src="http://walidream.com:9999/blogImage/nginx/nginx_26.jpg" alt="ssl" /></p>

<p>客户端第一次向服务器请求数据，此时nginx没有缓存，nginx会向服务器请求数据，服务器响应请求，nginx会将服务器响应的数据
缓存起来后再向客户端响应，当客户端第二次发送请求时，此时nginx有缓存就不会再向服务器发送请求，而是直接将之前的缓存返回给客户端。这样可以减轻服务器端的压力。</p>

<h1 id="2代理缓存配置项">2.代理缓存配置项</h1>

<h3 id="1proxy_cache_path">1.proxy_cache_path</h3>

<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Syntax:</span>	<span class="s">proxy_cache_path</span> <span class="s">path</span> <span class="s">[levels=levels]</span> <span class="s">[use_temp_path=on|off]</span> <span class="s">keys_zone=name:size</span> <span class="s">[inactive=time]</span> 
	<span class="s">[max_size=size]</span> <span class="s">[manager_files=number]</span> <span class="s">[manager_sleep=time]</span> <span class="s">[manager_threshold=time]</span> <span class="s">[loader_files=number]</span> 
	<span class="s">[loader_sleep=time]</span> <span class="s">[loader_threshold=time]</span> <span class="s">[purger=on|off]</span> <span class="s">[purger_files=number]</span> <span class="s">[purger_sleep=time]</span> <span class="s">[purger_threshold=time]</span><span class="p">;</span>
<span class="k">Default:</span> <span class="s">—</span>
<span class="s">Context:</span> <span class="s">http</span>
</code></pre></div></div>

<h3 id="2proxy_cache_valid">2.proxy_cache_valid</h3>

<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Syntax:</span>	<span class="s">proxy_cache_valid</span> <span class="s">[code</span> <span class="s">...]</span> <span class="s">time</span><span class="p">;</span>
<span class="k">Default:</span> <span class="s">—</span>
<span class="s">Context:</span> <span class="s">http,</span> <span class="s">server,</span> <span class="s">location</span>
</code></pre></div></div>

<h3 id="3proxy_cache_key">3.proxy_cache_key</h3>

<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Syntax:</span>	<span class="s">proxy_cache_key</span> <span class="s">string</span><span class="p">;</span>
<span class="k">Default:</span> <span class="s">proxy_cache_key</span> <span class="nv">$scheme$proxy_host$request_uri</span><span class="p">;</span>
<span class="k">Context:</span> <span class="s">http,</span> <span class="s">server,</span> <span class="s">location</span>
</code></pre></div></div>

<h1 id="3缓存场景配置">3.缓存场景配置</h1>

<p>服务目录</p>

<pre><code class="language-txt">#应用程序
/opt/app
|
|-cache #存放缓存
|-code
   |-index.html
|-code2
   |-index.html
|-code3
   |-index.html

#配置文件
/etc/nginx/conf.d
|
|-cache.conf
|-server1.conf
|-server2.conf
|-server3.conf
</code></pre>

<h4 id="indexhtmlcode">index.html(code)</h4>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
	<span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
	<span class="nt">&lt;title&gt;</span>Document<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>

<span class="nt">&lt;h1&gt;</span>欢迎来到瓦力博客<span class="nt">&lt;/h1&gt;</span>

<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>

</code></pre></div></div>

<h4 id="indexhtmlcode2">index.html(code2)</h4>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
	<span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
	<span class="nt">&lt;title&gt;</span>Document<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>

<span class="nt">&lt;h1&gt;</span>这个是code2<span class="nt">&lt;/h1&gt;</span>

<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>

</code></pre></div></div>

<h4 id="indexhtmlcode3">index.html(code3)</h4>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
	<span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
	<span class="nt">&lt;title&gt;</span>Document<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>

<span class="nt">&lt;h1&gt;</span>这个是code3<span class="nt">&lt;/h1&gt;</span>

<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>

</code></pre></div></div>

<h4 id="cacheconf">cache.conf</h4>

<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">upstream</span> <span class="s">wali</span> <span class="p">{</span>
    <span class="kn">server</span> <span class="nf">127.0.0.1</span><span class="p">:</span><span class="mi">8001</span><span class="p">;</span>
    <span class="kn">server</span> <span class="nf">127.0.0.1</span><span class="p">:</span><span class="mi">8002</span><span class="p">;</span>
    <span class="kn">server</span> <span class="nf">127.0.0.1</span><span class="p">:</span><span class="mi">8003</span><span class="p">;</span>  
<span class="p">}</span>

<span class="c1">#proxy_cache_path 设置路径</span>
<span class="c1">#levels 设置目录级别</span>
<span class="c1">#keys_zone=wali_cache:10m 定义名字wali_cache大小10M</span>
<span class="c1">#max_size=10g 缓存最大10G</span>
<span class="c1">#inactive=60m 表示60分钟内如果没有被访问过就清掉</span>
<span class="k">proxy_cache_path</span> <span class="n">/opt/app/cache</span> <span class="s">levels=1:2</span> <span class="s">keys_zone=wali_cache:10m</span> <span class="s">max_size=10g</span> <span class="s">inactive=60m</span> <span class="s">use_temp_path=off</span><span class="p">;</span>

<span class="k">server</span> <span class="p">{</span>
    <span class="kn">listen</span>       <span class="mi">80</span><span class="p">;</span>
    <span class="kn">server_name</span>  <span class="s">localhost</span><span class="p">;</span>

    <span class="c1">#charset koi8-r;</span>
    <span class="kn">access_log</span>  <span class="n">/var/log/nginx/host.access.log</span>  <span class="s">main</span><span class="p">;</span>

    <span class="kn">location</span> <span class="n">/</span> <span class="p">{</span>
      <span class="kn">proxy_cache</span> <span class="s">wali_cache</span><span class="p">;</span>  <span class="c1">#开启缓存 off关闭缓存</span>
      <span class="kn">proxy_pass</span> <span class="s">http://wali</span><span class="p">;</span>  
      <span class="kn">proxy_cache_valid</span> <span class="mi">200</span> <span class="mi">304</span> <span class="s">12h</span><span class="p">;</span>  <span class="c1">#表示对200 304头信息12小时过期</span>
      <span class="kn">proxy_cache_valid</span> <span class="s">any</span> <span class="mi">10m</span><span class="p">;</span>      <span class="c1">#表示除200 304头信息10钟过期</span>
      <span class="kn">proxy_cache_key</span> <span class="nv">$host$uri$is_args$args</span><span class="p">;</span>  <span class="c1">#设置缓存的key</span>
      <span class="kn">add_header</span> <span class="s">Nginx-Cache</span> <span class="s">"</span><span class="nv">$upstream_cache_status</span><span class="s">"</span><span class="p">;</span>  <span class="c1">#添加一个头信息，告知客户端是否命中缓存</span>

	  <span class="c1">#当返回的头信息中有500,502,503,504就跳过当前访问下一台服务器</span>
      <span class="kn">proxy_next_upstream</span> <span class="s">error</span> <span class="s">timeout</span> <span class="s">invalid_header</span> <span class="s">http_500</span> <span class="s">http_502</span> <span class="s">http_503</span> <span class="s">http_504</span><span class="p">;</span>
      <span class="kn">include</span> <span class="s">proxy_params</span><span class="p">;</span> <span class="c1">#导入常用的代理配置在上一节中写到过</span>
    <span class="p">}</span>
	
<span class="p">}</span>

</code></pre></div></div>

<h4 id="server1conf">server1.conf</h4>

<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">server</span> <span class="p">{</span>
    <span class="kn">listen</span>       <span class="mi">8001</span><span class="p">;</span>
    <span class="kn">server_name</span>  <span class="s">localhost</span><span class="p">;</span>

    <span class="c1">#charset koi8-r;</span>
    <span class="c1">#access_log  /var/log/nginx/host.access.log  main;</span>

    <span class="kn">location</span> <span class="n">/</span> <span class="p">{</span> 
        <span class="kn">root</span>   <span class="n">/opt/app/code</span><span class="p">;</span>
        <span class="kn">index</span>  <span class="s">index.html</span> <span class="s">index.htm</span><span class="p">;</span>
    <span class="p">}</span> 
<span class="p">}</span>
</code></pre></div></div>

<h4 id="server2conf">server2.conf</h4>

<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">server</span> <span class="p">{</span>
    <span class="kn">listen</span>       <span class="mi">8002</span><span class="p">;</span>
    <span class="kn">server_name</span>  <span class="s">localhost</span><span class="p">;</span>

    <span class="c1">#charset koi8-r;</span>
    <span class="c1">#access_log  /var/log/nginx/host.access.log  main;</span>

    <span class="kn">location</span> <span class="n">/</span> <span class="p">{</span> 
        <span class="kn">root</span>   <span class="n">/opt/app/code2</span><span class="p">;</span>
        <span class="kn">index</span>  <span class="s">index.html</span> <span class="s">index.htm</span><span class="p">;</span>
    <span class="p">}</span> 
<span class="p">}</span>
</code></pre></div></div>

<h4 id="server3conf">server3.conf</h4>

<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">server</span> <span class="p">{</span>
    <span class="kn">listen</span>       <span class="mi">8003</span><span class="p">;</span>
    <span class="kn">server_name</span>  <span class="s">localhost</span><span class="p">;</span>

    <span class="c1">#charset koi8-r;</span>
    <span class="c1">#access_log  /var/log/nginx/host.access.log  main;</span>

    <span class="kn">location</span> <span class="n">/</span> <span class="p">{</span> 
        <span class="kn">root</span>   <span class="n">/opt/app/code3</span><span class="p">;</span>
        <span class="kn">index</span>  <span class="s">index.html</span> <span class="s">index.htm</span><span class="p">;</span>
    <span class="p">}</span> 
<span class="p">}</span>
</code></pre></div></div>

<p>检测语法重启服务</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nginx -tc /etc/nginx/conf

nginx -s reload -c /etc/nginx/conf
</code></pre></div></div>

<h4 id="关闭代理缓存">关闭代理缓存</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>proxy_cache off;
</code></pre></div></div>

<p>为了更直观的看到效果，将<code class="language-plaintext highlighter-rouge">cache.conf</code>文件修改，然后重启服务</p>

<p>打开控制台，勾选<code class="language-plaintext highlighter-rouge">Disable cache</code>禁用掉缓存，<code class="language-plaintext highlighter-rouge">F5</code>刷新。就会看到内容不停在变。</p>

<h4 id="打开代理缓存">打开代理缓存</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>proxy_cache wali_cache;  
</code></pre></div></div>

<p>打开控制台，勾选<code class="language-plaintext highlighter-rouge">Disable cache</code>禁用掉缓存，<code class="language-plaintext highlighter-rouge">F5</code>刷新。发现内容不会变。头信息中多了Nginx-Cache值为HIT表示命中缓存，同时在<code class="language-plaintext highlighter-rouge">/opt/app/cache</code>目录下面也会出现缓存文件。</p>

<p><img src="http://walidream.com:9999/blogImage/nginx/nginx_27.jpg" alt="ssl" /></p>

<h1 id="4清理指定代理缓存">4.清理指定代理缓存</h1>

<h3 id="proxy_no_cache">proxy_no_cache</h3>

<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Syntax:</span>	<span class="s">proxy_no_cache</span> <span class="s">string</span> <span class="s">...</span><span class="p">;</span>
<span class="k">Default:</span> <span class="s">—</span>
<span class="s">Context:</span> <span class="s">http,</span> <span class="s">server,</span> <span class="s">location</span>
</code></pre></div></div>

<h4 id="示例配置">示例配置</h4>

<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">server</span> <span class="p">{</span>
    <span class="kn">listen</span>       <span class="mi">80</span><span class="p">;</span>
    <span class="kn">server_name</span>  <span class="s">localhost</span><span class="p">;</span>

    <span class="c1">#charset koi8-r;</span>
    <span class="kn">access_log</span>  <span class="n">/var/log/nginx/host.access.log</span>  <span class="s">main</span><span class="p">;</span>

	<span class="kn">if</span> <span class="s">(</span> <span class="nv">$request_uri</span> <span class="p">~</span> <span class="sr">^/(url3|login|register|password))</span> <span class="p">{</span>
		<span class="kn">set</span> <span class="nv">$cookie_nocache</span> <span class="mi">1</span><span class="p">;</span>
	<span class="p">}</span>
	
    <span class="kn">location</span> <span class="n">/</span> <span class="p">{</span>
      <span class="kn">proxy_cache</span> <span class="s">wali_cache</span><span class="p">;</span>  
      <span class="kn">proxy_pass</span> <span class="s">http://wali</span><span class="p">;</span>  
      <span class="kn">proxy_cache_valid</span> <span class="mi">200</span> <span class="mi">304</span> <span class="s">12h</span><span class="p">;</span>  
      <span class="kn">proxy_cache_valid</span> <span class="s">any</span> <span class="mi">10m</span><span class="p">;</span>      
      <span class="kn">proxy_cache_key</span> <span class="nv">$host$uri$is_args$args</span><span class="p">;</span>  
	  <span class="kn">proxy_no_cache</span> <span class="nv">$cookie_nocache</span> <span class="nv">$arg_nocache</span> <span class="nv">$arg_comment</span><span class="p">;</span>  
	  <span class="kn">proxy_no_cache</span> <span class="nv">$http_pragma</span> <span class="nv">$http_authorization</span><span class="p">;</span>
      <span class="kn">add_header</span> <span class="s">Nginx-Cache</span> <span class="s">"</span><span class="nv">$upstream_cache_status</span><span class="s">"</span><span class="p">;</span>  

      <span class="kn">proxy_next_upstream</span> <span class="s">error</span> <span class="s">timeout</span> <span class="s">invalid_header</span> <span class="s">http_500</span> <span class="s">http_502</span> <span class="s">http_503</span> <span class="s">http_504</span><span class="p">;</span>
      <span class="kn">include</span> <span class="s">proxy_params</span><span class="p">;</span> <span class="c1">#导入常用的代理配置在上一节中写到过</span>
    <span class="p">}</span>
	
<span class="p">}</span>
</code></pre></div></div>

<p>proxy_no_cache配置项后面跟着的string，如果匹配到就不会去缓存。这里设置如果匹配<code class="language-plaintext highlighter-rouge">/(url3|login|register|password)</code>就不会被缓存。</p>

<p>还有一个插件<code class="language-plaintext highlighter-rouge">ngx_cache_purge</code>，可以指定哪些url不会被缓存。感兴趣的小伙伴可以试试</p>

<h1 id="5缓存命中率分析">5.缓存命中率分析</h1>

<p>$upstream_cache_status</p>

<table>
  <thead>
    <tr>
      <th>状态</th>
      <th>含义</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>MISS</td>
      <td>未命中，请求被传送到后台处理</td>
    </tr>
    <tr>
      <td>HIT</td>
      <td>缓存命中</td>
    </tr>
    <tr>
      <td>EXPIRED</td>
      <td>缓存已经过期，请求被传送到后台处理</td>
    </tr>
    <tr>
      <td>UPDATING</td>
      <td>正在更新缓存，将使用旧的应答</td>
    </tr>
    <tr>
      <td>STALE</td>
      <td>后端得到过期的应答</td>
    </tr>
  </tbody>
</table>

<p>缓存命中率</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>缓存命中率 = HIT次数 / 总请求次数
</code></pre></div></div>

<p>用日志分析代理缓存的命中率需要用到<code class="language-plaintext highlighter-rouge">awk</code>命令，如果不熟悉<code class="language-plaintext highlighter-rouge">awk</code>命令<a href="/linux/2018/12/20/awk.html" title="/linux/2018/12/20/awk.html" target="_blank">传送门</a>。</p>

<p>打开缓存配置文件</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim /etc/nginx/conf.d/cache.conf
</code></pre></div></div>

<p>查找到日志存放在哪里，这里是存放在<code class="language-plaintext highlighter-rouge">/var/log/nginx/host.access.log</code>，日志格式main</p>

<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">access_log</span>  <span class="n">/var/log/nginx/host.access.log</span>  <span class="s">main</span><span class="p">;</span>
</code></pre></div></div>

<p>在打开</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim /etc/nginx/nginx.conf
</code></pre></div></div>

<p>查找到日志存放在哪里，发现日志存在<code class="language-plaintext highlighter-rouge">/var/log/nginx/access.log</code></p>

<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">log_format</span>  <span class="s">main</span>  <span class="s">'</span><span class="nv">$http_user_agent</span><span class="s">'</span> <span class="s">'</span><span class="nv">$remote_addr</span> <span class="s">-</span> <span class="nv">$remote_user</span> <span class="s">[</span><span class="nv">$time_local</span><span class="s">]</span> <span class="s">"</span><span class="nv">$request</span><span class="s">"</span> <span class="s">'</span>
                  <span class="s">'</span><span class="nv">$status</span> <span class="nv">$body_bytes_sent</span> <span class="s">"</span><span class="nv">$http_referer</span><span class="s">"</span> <span class="s">'</span>
                  <span class="s">'"</span><span class="nv">$http_user_agent</span><span class="s">"</span> <span class="s">"</span><span class="nv">$http_x_forwarded_for</span><span class="s">"</span> <span class="s">'</span><span class="p">;</span>

<span class="k">access_log</span>  <span class="n">/var/log/nginx/access.log</span>  <span class="s">main</span><span class="p">;</span>
</code></pre></div></div>

<p>向<code class="language-plaintext highlighter-rouge">nginx.conf</code>文件中添加<code class="language-plaintext highlighter-rouge">$upstream_cache_status"</code>指nginx代理缓存命中的值</p>

<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">log_format</span>  <span class="s">main</span>  <span class="s">'</span><span class="nv">$http_user_agent</span><span class="s">'</span> <span class="s">'</span><span class="nv">$remote_addr</span> <span class="s">-</span> <span class="nv">$remote_user</span> <span class="s">[</span><span class="nv">$time_local</span><span class="s">]</span> <span class="s">"</span><span class="nv">$request</span><span class="s">"</span> <span class="s">'</span>
                  <span class="s">'</span><span class="nv">$status</span> <span class="nv">$body_bytes_sent</span> <span class="s">"</span><span class="nv">$http_referer</span><span class="s">"</span> <span class="s">'</span>
                  <span class="s">'"</span><span class="nv">$http_user_agent</span><span class="s">"</span> <span class="s">"</span><span class="nv">$http_x_forwarded_for</span><span class="s">"</span> <span class="s">'</span>
                  <span class="s">'"</span><span class="nv">$upstream_cache_status</span><span class="s">"'</span><span class="p">;</span>  <span class="c1">#添加nginx缓存命中值</span>

<span class="k">access_log</span>  <span class="n">/var/log/nginx/access.log</span>  <span class="s">main</span><span class="p">;</span>
</code></pre></div></div>

<p>先清空一下代理缓存文件记录<code class="language-plaintext highlighter-rouge">/var/log/nginx/host.access.log</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;/var/log/nginx/host.access.log
</code></pre></div></div>

<p>清空后重启nginx服务，在浏览器上刷新页面。然后在命令行中输入</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>awk '{if($NF=="\"HIT\""){hit++}}END{printf "%.2f",hit/NR}' /var/log/nginx/host.access.log
</code></pre></div></div>

<p>打印出来的就是nginx缓存命中率。</p>

<h1 id="6代理缓存分片">6.代理缓存分片</h1>

<h3 id="slice">slice</h3>

<p>slice配置项是属于<code class="language-plaintext highlighter-rouge">ngx_http_slice_module</code>模块<a href="http://nginx.org/en/docs/http/ngx_http_slice_module.html" title="http://nginx.org/en/docs/http/ngx_http_slice_module.html" target="_blank">传送门</a></p>

<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Syntax:</span>	<span class="s">slice</span> <span class="s">size</span><span class="p">;</span>
<span class="k">Default:</span> <span class="s">slice</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">Context:</span> <span class="s">http,</span> <span class="s">server,</span> <span class="s">location</span>
</code></pre></div></div>

<h4 id="示例配置-1">示例配置</h4>

<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">location</span> <span class="n">/</span> <span class="p">{</span>
    <span class="kn">slice</span>             <span class="mi">1m</span><span class="p">;</span>
    <span class="kn">proxy_cache</span>       <span class="s">cache</span><span class="p">;</span>
    <span class="kn">proxy_cache_key</span>   <span class="nv">$uri$is_args$args$slice_range</span><span class="p">;</span>
    <span class="kn">proxy_set_header</span>  <span class="s">Range</span> <span class="nv">$slice_range</span><span class="p">;</span>
    <span class="kn">proxy_cache_valid</span> <span class="mi">200</span> <span class="mi">206</span> <span class="s">1h</span><span class="p">;</span>
    <span class="kn">proxy_pass</span>        <span class="s">http://localhost:8000</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="分片优势">分片优势</h4>

<p>每个子请求收到的数据都会形成一个独立文件，一个请求断了，其他请求不受影响。</p>

<h4 id="分片劣势">分片劣势</h4>

<p>当文件很大或者slice很小的时候，可能会导致文件描述符耗尽等情况</p>

:ET