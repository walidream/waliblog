I"6<p>python进阶中需要深入理解python中一切皆对象，只有理解python中一切皆对象后，才能在python编程中越走越远。</p>

<h1 id="1一切皆对象">1.一切皆对象</h1>

<p>在<code class="language-plaintext highlighter-rouge">python</code>中一切皆对象，包括<code class="language-plaintext highlighter-rouge">函数</code>、<code class="language-plaintext highlighter-rouge">类</code>、<code class="language-plaintext highlighter-rouge">方法</code>都是对象，但是函数和类比较高级，属于python中的一等公民，具有以下属性</p>

<p>一等公民具有属性：</p>
<ul>
  <li>可以赋值给一个变量</li>
  <li>可以添加到集合对象中</li>
  <li>可以作为参数传递</li>
  <li>可以当做函数的返回值</li>
</ul>

<h4 id="函数和类赋值给一个变量">函数和类赋值给一个变量</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">hello</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"hello world"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"person"</span><span class="p">)</span>

<span class="n">h</span> <span class="o">=</span> <span class="n">hello</span>
<span class="n">P1</span> <span class="o">=</span> <span class="n">Person</span>

<span class="n">h</span><span class="p">()</span>
<span class="n">p1</span><span class="p">()</span>
</code></pre></div></div>

<h4 id="函数和类可以添加到集合对象中">函数和类可以添加到集合对象中</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">hello</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"hello world"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"person"</span><span class="p">)</span>
    
<span class="n">li</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">li</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">hello</span><span class="p">)</span>
<span class="n">li</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">Person</span><span class="p">)</span>

<span class="c1">#执行
</span><span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">li</span><span class="p">:</span>
    <span class="n">item</span><span class="p">()</span>
</code></pre></div></div>

<h4 id="函数和类可以作为参数传递">函数和类可以作为参数传递</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">hello</span><span class="p">(</span><span class="n">fn</span><span class="p">):</span>
    <span class="n">fn</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">test</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"我是一个测试函数"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"person"</span><span class="p">)</span>
<span class="c1">#函数作为值传递    
</span><span class="n">hello</span><span class="p">(</span><span class="n">test</span><span class="p">)</span>

<span class="c1">#类作为值传递
</span><span class="n">hello</span><span class="p">(</span><span class="n">Person</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="函数和类可以作为返回值">函数和类可以作为返回值</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"test"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"person"</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">hello</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">test</span>

<span class="k">def</span> <span class="nf">testClass</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">Person</span>

<span class="c1">#函数作为返回值
</span><span class="n">hello</span><span class="p">()</span>

<span class="c1">#类作为返回值
</span><span class="n">testClass</span><span class="p">()</span>
</code></pre></div></div>

<h1 id="2typeclassobject三者关系">2.type、class、object三者关系</h1>

<p>什么是对象？对象就是一个实体，如一张桌子，一把椅子等等，只要是一个具体的实物他就是一个对象。在理解对象后，接下来在理解<code class="language-plaintext highlighter-rouge">type</code>、<code class="language-plaintext highlighter-rouge">class</code>、<code class="language-plaintext highlighter-rouge">object</code>三者之间的关系。</p>

<h4 id="tpye">tpye</h4>

<p><strong>type</strong>有两种用法：</p>
<ul>
  <li>生成一个类</li>
  <li>返回对象的类型</li>
</ul>

<p>type()和isinstance()的区别：</p>
<ul>
  <li>type() 不会考虑继承关系</li>
  <li>isinstance() 会考虑继承关系</li>
</ul>

<h4 id="type和class关系">type和class关系</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="nb">type</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="o">&lt;</span><span class="k">class</span> <span class="err">'</span><span class="nc">int</span><span class="s">'&gt;
type(int)
&gt;&gt;&gt; &lt;class '</span><span class="nb">type</span><span class="s">'&gt;

st = '</span><span class="n">abc</span><span class="s">'
type(st)
&gt;&gt;&gt; &lt;class '</span><span class="nb">str</span><span class="s">'&gt;
type(str)
&gt;&gt;&gt; &lt;class '</span><span class="nb">type</span><span class="s">'&gt;
</span></code></pre></div></div>

<p>通过上面的例子，可以得出 <code class="language-plaintext highlighter-rouge">type</code> -&gt; <code class="language-plaintext highlighter-rouge">int</code> -&gt; <code class="language-plaintext highlighter-rouge">1</code>也就是 <code class="language-plaintext highlighter-rouge">type</code> -&gt; <code class="language-plaintext highlighter-rouge">class</code> -&gt; <code class="language-plaintext highlighter-rouge">obj</code>(这个obj就是我们经常说的实例也就是一个具体的对象)，我们可以验证下自己定义的类是不是满足</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Student</span><span class="p">:</span>
    <span class="k">pass</span>

<span class="n">stu</span> <span class="o">=</span> <span class="n">Student</span><span class="p">()</span>
<span class="nb">type</span><span class="p">(</span><span class="n">stu</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="o">&lt;</span><span class="k">class</span> <span class="err">'</span><span class="nc">__main__</span><span class="p">.</span><span class="n">Student</span><span class="s">'&gt;
type(Student)
&gt;&gt;&gt; &lt;class '</span><span class="nb">type</span><span class="s">'&gt;
</span></code></pre></div></div>
<p>通过我们自定义<code class="language-plaintext highlighter-rouge">student</code>类发现也满足<code class="language-plaintext highlighter-rouge">type</code> -&gt; <code class="language-plaintext highlighter-rouge">class</code> -&gt; <code class="language-plaintext highlighter-rouge">obj</code>的关系。</p>

<h4 id="class和object的关系">class和object的关系</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#python 2版本定义类
</span><span class="k">class</span> <span class="nc">Student</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="c1">#python 3版本定义类
</span><span class="k">class</span> <span class="nc">Student</span><span class="p">:</span>
    <span class="k">pass</span>

</code></pre></div></div>
<p>通过对比python2版本和python3版本中定义类，发现在python 3版本中如果不声明继承基类(也就是父类),则默认继承objec。下面我们来验证一下</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="nb">int</span><span class="p">.</span><span class="n">__bases__</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="o">&lt;</span><span class="k">class</span> <span class="err">'</span><span class="nc">object</span><span class="s">'&gt;
print(str.__bases__)
&gt;&gt;&gt; &lt;class '</span><span class="nb">object</span><span class="s">'&gt;

#自定义类

class Person:
    pass

class Student(Person):
    pass

print(Person.__bases__)
&gt;&gt;&gt; &lt;class '</span><span class="nb">object</span><span class="s">'&gt;

print(Student.__bases__)
&gt;&gt;&gt; &lt;class '</span><span class="n">__main__</span><span class="p">.</span><span class="n">Person</span><span class="s">'&gt;

</span></code></pre></div></div>

<h4 id="type和object的关系">type和object的关系</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">type</span><span class="p">(</span><span class="nb">type</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="o">&lt;</span><span class="k">class</span> <span class="err">'</span><span class="nc">type</span><span class="s">'&gt;

type.__bases__
&gt;&gt;&gt; (&lt;class '</span><span class="nb">object</span><span class="s">'&gt;,)

type(object)
&gt;&gt;&gt; &lt;class '</span><span class="nb">type</span><span class="s">'&gt;

object.__bases__
&gt;&gt;&gt; ()
</span></code></pre></div></div>

<p>通过上面例子，我们可以发现 type的类就是<code class="language-plaintext highlighter-rouge">type</code>，继承<code class="language-plaintext highlighter-rouge">object</code>。object的类也是<code class="language-plaintext highlighter-rouge">type</code>,无继承。object是python中最顶层的类，所有的类都继承于<code class="language-plaintext highlighter-rouge">object</code>。</p>

<p><img src="http://walidream.com:9999/blogImage/python/python_61.png" alt="ssl" /></p>

<p>上面这张图我把它分为2部分，第一部分是用绿色框起来的，第二部分是用黄色线分开的。为了更好的理解这张图，我们先来看黄色线分开的这部分。</p>

<p>第二部分关系：abc 是 str的实例，str继承object, str是type实例，这部分理解起来比较容易，开头说过type的作用一种是生成类型，一种是返回对象的类型，在后面会详细介绍如何用type生成自定义的类</p>

<p>第一部分关系，type可以实例type, object 是type的实例，也就是type是python中用于生成实例的，type继承objec，object继承(),说明object是python最顶层的类。到这里小伙伴们应该理解了<code class="language-plaintext highlighter-rouge">python一切皆对象</code>这句话的含义了</p>

<h1 id="3python的内置类型">3.python的内置类型</h1>

<p>python中对象有三个特性，<code class="language-plaintext highlighter-rouge">身份</code>(在内存中的地址)、<code class="language-plaintext highlighter-rouge">类型</code>(类型)、<code class="language-plaintext highlighter-rouge">值</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="nb">id</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="mi">1533568176</span> 

<span class="nb">type</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="o">&lt;</span><span class="k">class</span> <span class="err">'</span><span class="nc">int</span><span class="s">'&gt;

#值
1
</span></code></pre></div></div>

<p>python中的内置类型:</p>

<p><img src="http://walidream.com:9999/blogImage/python/python_62.png" alt="ssl" /></p>

:ET