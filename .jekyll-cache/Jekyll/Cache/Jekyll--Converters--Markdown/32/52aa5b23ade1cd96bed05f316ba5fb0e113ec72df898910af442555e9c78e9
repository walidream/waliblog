I"yK<p>在混合式应用中，我们通过现有的Cordova插件，可以轻松的在 H5 上调用手机native的功能。现有的Cordova插件能满足平时大部分的开发需求，然而，有时候找不到合适的插件、或对找到的插件有不满意的地方，那就要动手去做或改写一个插件，这时候就要了解一些Cordova插件的相关知识。</p>

<ul>
  <li><a href="https://www.jianshu.com/p/02e17c392144" title="https://www.jianshu.com/p/02e17c392144">参考 自定义Cordova插件详解</a></li>
  <li><a href="https://cordova.apache.org/docs/en/3.4.0/guide/hybrid/plugins/index.html#Plugin%20Development%20Guide" title="https://cordova.apache.org/docs/en/3.4.0/guide/hybrid/plugins/index.html#Plugin%20Development%20Guide">Cordova 自定义插件的官方文档</a></li>
</ul>

<p>那Cordova插件的基础要点是什么呢？其实就是把原生代码调用方法映射为js的统一接口，供H5使用而已.</p>

<h1 id="1观察现有应用结构">1.观察现有应用结构</h1>

<p>打开任意一个基于Cordova技术的hybird app的开发目录，添加过平台（android、ios等）和安装过插件的话，你会发现结构大致是这样子的：</p>

<pre><code class="language-txt">├── platforms
|    ├── android
|    ├── ios
|    └── ...
├── plugins
|    ├── org.apache.cordova.device
|    └── ...
├── config.xml
└── www
</code></pre>

<p>这里的<code class="language-plaintext highlighter-rouge">platforms</code>是我们应用支持的平台目录，<code class="language-plaintext highlighter-rouge">plugins</code>是我们安装的插件目录，<code class="language-plaintext highlighter-rouge">config.xml</code> 是应用的配置信息（应用名称、描述等），<code class="language-plaintext highlighter-rouge">www</code> 是我们的 <code class="language-plaintext highlighter-rouge">web</code> 工程目录。</p>

<p>也就是说，如果我们创建一个新的插件并安装，也会添加到plugins目录中，同时修改其它文件信息。</p>

<h1 id="2使用plugman开发cordova插件">2.使用plugman开发Cordova插件</h1>

<p>一个独立插件的目录基本结构是这样的：</p>

<pre><code class="language-txt">MyToast
├── src
|    ├── android
|    |    └── MyToast.java
|    ├── ios
|    └── ...
├── www
|    └── MyToast.js
└── plugin.xml
</code></pre>

<p>src存放的是各平台的原生代码，plugin.xml为插件描述及配置文件，www是web工程目录（其实主要就是MyToast.js这个js中间件），我们可以手动创建这几个目录及文件，然而这并不是一个好的方式，因为效率不高，推荐的方式是使用plumam。</p>

<h4 id="安装plugman命令">安装plugman命令</h4>

<pre><code class="language-txt">npm install -g plugman

#也可用yarn命令进行安装
yarn global add plugman
</code></pre>

<h4 id="创建plugin">创建plugin</h4>

<p>使用plumam创建插件的命令是</p>

<pre><code class="language-txt">plugman create --name pluginName --plugin_id pluginID --plugin_version version  [--path path] [--variable NAME=VALUE]
</code></pre>

<table>
  <thead>
    <tr>
      <th>参数</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>pluginName</td>
      <td>插件名称，如MyToast</td>
    </tr>
    <tr>
      <td>pluginID</td>
      <td>插件id, 如:org.demo.mytoast</td>
    </tr>
    <tr>
      <td>version</td>
      <td>版本号, 如:0.0.1</td>
    </tr>
    <tr>
      <td>path</td>
      <td>插件存放的绝对或相对路径</td>
    </tr>
    <tr>
      <td>variable NAME=VALUE</td>
      <td>扩展参数，如说明或作者，如woodstream</td>
    </tr>
  </tbody>
</table>

<p>创建一个MyToast插件</p>
<pre><code class="language-txt">plugman create --name MyToast --plugin_id org.demo.mytoast --plugin_version 0.0.1
</code></pre>

<p>这样将会在当前目录创建一个MyToast插件，进入插件目录，打开<code class="language-plaintext highlighter-rouge">plugin.xml</code>查看，注意以下内容及说明：</p>

<pre><code class="language-txt">plugin
- id：插件唯一标识
- version：版本号
- js-module
    src：js中间件相对文件地址（www目录下的那个js）
    name：模块名称
    clobbers/merges
        target：H5通过它调用js中间件方法（ts调用方法的前缀）
- platform
    name：对应平台android | ios
    source-file
        src：类名
        tartget-dir：插件文件复制到到原生项目位置
        feature
             name：js中间件通过它调用原生方法（包名）
        uses-permission：相关原生权限
</code></pre>

<p>等你消化完<code class="language-plaintext highlighter-rouge">plugin.xml</code>文件后，敲入命令进入插件目录：</p>

<pre><code class="language-txt">cd MyToast
</code></pre>

<p>添加支持平台</p>

<pre><code class="language-txt">plugman platform add --platform_name android
plugman platform add --platform_name ios
</code></pre>

<p>添加完支持的平台后，就会分别创建<code class="language-plaintext highlighter-rouge">MyToast.java</code>和<code class="language-plaintext highlighter-rouge">MyToast.m</code>文件</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>src
|--android
    |--MyToast.java
|ios
   |--MyToast.m
</code></pre></div></div>

<p>这里演示以android代码为例，打开MyToast.java文件</p>

<h4 id="mytoastjava">MyToast.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyToast</span> <span class="kd">extends</span> <span class="nc">CordovaPlugin</span> <span class="o">{</span>

  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">execute</span><span class="o">(</span><span class="nc">String</span> <span class="n">action</span><span class="o">,</span> <span class="nc">JSONArray</span> <span class="n">args</span><span class="o">,</span> <span class="nc">CallbackContext</span> <span class="n">callbackContext</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">JSONException</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">action</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"coolMethod"</span><span class="o">))</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">message</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">coolMethod</span><span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="n">callbackContext</span><span class="o">);</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">coolMethod</span><span class="o">(</span><span class="nc">String</span> <span class="n">message</span><span class="o">,</span> <span class="nc">CallbackContext</span> <span class="n">callbackContext</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">message</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">message</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">callbackContext</span><span class="o">.</span><span class="na">success</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="n">callbackContext</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">"Expected one non-empty string argument."</span><span class="o">);</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>我们修改一下java代码让其弹出一个提示框。</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">package cordova.plugin.mytoast;
</span>
+ import android.app.Activity;
<span class="gi">+ import android.widget.Toast;
</span>
import org.apache.cordova.CordovaPlugin;
<span class="p">import org.apache.cordova.CallbackContext;
</span>
import org.json.JSONArray;
<span class="p">import org.json.JSONException;
import org.json.JSONObject;
</span>
/**
 * This class echoes a string called from JavaScript.
 */
<span class="p">public class MyToast extends CordovaPlugin {
</span>
    @Override
    public boolean execute(String action, JSONArray args, CallbackContext callbackContext) throws JSONException {
        if (action.equals("coolMethod")) {
            String message = args.getString(0);
            this.coolMethod(message, callbackContext);
            return true;
        }
        return false;
    }

    private void coolMethod(String message, CallbackContext callbackContext) {
        if (message != null &amp;&amp; message.length() &gt; 0) {
<span class="gi">+           Activity activity = this.cordova.getActivity();
+           android.widget.Toast.makeText(activity, message, Toast.LENGTH_SHORT).show();
</span>            callbackContext.success(message);
        } else {
            callbackContext.error("Expected one non-empty string argument.");
        }
    }
<span class="err">}</span>
</code></pre></div></div>

<h4 id="打开wwwmytoastjs">打开www/MyToast.js</h4>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">exec</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">cordova/exec</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">exports</span><span class="p">.</span><span class="nx">coolMethod</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">arg0</span><span class="p">,</span> <span class="nx">success</span><span class="p">,</span> <span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">exec</span><span class="p">(</span><span class="nx">success</span><span class="p">,</span> <span class="nx">error</span><span class="p">,</span> <span class="dl">'</span><span class="s1">MyToast</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">coolMethod</span><span class="dl">'</span><span class="p">,</span> <span class="p">[</span><span class="nx">arg0</span><span class="p">]);</span>
<span class="p">};</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">MyToast.java</code>代码中 class MyToast 继承了<code class="language-plaintext highlighter-rouge">CordovaPlugin</code>,将<code class="language-plaintext highlighter-rouge">MyToast</code>类挂载到了cordova.plugin上面。<code class="language-plaintext highlighter-rouge">MyToast.js</code>代码中执行一下MyToast中coolMethod方法。</p>

<h1 id="3创建json文件">3.创建json文件</h1>

<p>后来的Cordova版本要求添加一个<code class="language-plaintext highlighter-rouge">package.json</code>来管理插件，而<code class="language-plaintext highlighter-rouge">plumam</code>没有给我们创建这样一个文件，于是我们手动创建，借助<code class="language-plaintext highlighter-rouge">npm init</code>命令创建<code class="language-plaintext highlighter-rouge">package.json</code>。里面的参数从plugin.xml拿过来便是：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
 </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"MyToast"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0.0.1"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"demo"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"cordova"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"org.demo.mytoast"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"platforms"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="s2">"android"</span><span class="w">
    </span><span class="p">]</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"keywords"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
  </span><span class="nl">"author"</span><span class="p">:</span><span class="w"> </span><span class="s2">"demo"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"license"</span><span class="p">:</span><span class="w"> </span><span class="s2">"MIT"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h1 id="4安装已开发完成的插件">4.安装已开发完成的插件</h1>

<p>如果没有现成的项目，可以创建一个新的cordova项目来测试：</p>

<pre><code class="language-txt">cordova create hello com.example.hello HelloWorld

cd hello

cordova platform add android
</code></pre>

<p>然后像平常添加插件一样，运行如下命令：（add 后面为插件所在本地或网络路径）：</p>

<pre><code class="language-txt">cordova plugin add F:\cordova\firstApp\MyToast
</code></pre>

<p>如果已有项目且是ionic项目，则命令前追加上ionic：</p>

<pre><code class="language-txt">ionic cordova plugin add F:\cordova\firstApp\MyToast
</code></pre>

<p>在ionic2或以上使用时，打开任意一个ts文件，在头部声明如下：</p>
<pre><code class="language-txt">declare let cordova: any;
</code></pre>

<h4 id="检测插件是否安装">检测插件是否安装</h4>

<p>执行下面命令，查看刚才安装的插件是否被添加进去</p>

<pre><code class="language-txt">#查看插件
cordova plugin ls
或者
ionic cordova plugin list

#移除插件
cordova plugin remove XXXXX(你的plugin_id)
或者
ionic cordova plugin remove XXXXX(你的plugin_id)
</code></pre>

<h1 id="5调用自定义的插件">5.调用自定义的插件</h1>

<p>打开刚才创建的<code class="language-plaintext highlighter-rouge">hello</code>项目，修改下面文件</p>

<h4 id="wwwindexhtml">www/index.html</h4>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gd">&lt;!DOCTYPE html&gt;
</span>
&lt;html&gt;
    &lt;head&gt;
        &lt;!--
        Customize this policy to fit your own app's needs. For more guidance, see:
            https://github.com/apache/cordova-plugin-whitelist/blob/master/README.md#content-security-policy
        Some notes:
            * gap: is required only on iOS (when using UIWebView) and is needed for JS-&gt;native communication
            * https://ssl.gstatic.com is required only on Android and is needed for TalkBack to function properly
            * Disables use of inline scripts in order to mitigate risk of XSS vulnerabilities. To change this:
                * Enable inline JS: add 'unsafe-inline' to default-src
        --&gt;
        &lt;meta http-equiv="Content-Security-Policy" content="default-src 'self' data: gap: https://ssl.gstatic.com 'unsafe-eval'; style-src 'self' 'unsafe-inline'; media-src *; img-src 'self' data: content:;"&gt;
        &lt;meta name="format-detection" content="telephone=no"&gt;
        &lt;meta name="msapplication-tap-highlight" content="no"&gt;
        &lt;meta name="viewport" content="initial-scale=1, width=device-width, viewport-fit=cover"&gt;
        &lt;link rel="stylesheet" type="text/css" href="css/index.css"&gt;
        &lt;title&gt;Hello World&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class="app"&gt;
            &lt;h1&gt;Apache Cordova&lt;/h1&gt;
<span class="gi">+           &lt;button id="wechat"&gt;微信&lt;/button&gt;
</span>            &lt;div id="deviceready" class="blink"&gt;
                &lt;p class="event listening"&gt;Connecting to Device&lt;/p&gt;
                &lt;p class="event received"&gt;Device is Ready&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;script type="text/javascript" src="cordova.js"&gt;&lt;/script&gt;
        &lt;script type="text/javascript" src="js/index.js"&gt;&lt;/script&gt;
    &lt;/body&gt;
<span class="gd">&lt;/html&gt;
</span>
</code></pre></div></div>

<h4 id="wwwjsindexjs">www/js/index.js</h4>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">var app = {
</span>    // Application Constructor
    initialize: function() {
        document.addEventListener('deviceready', this.onDeviceReady.bind(this), false);
    },

    // deviceready Event Handler
    //
    // Bind any cordova events here. Common events are:
    // 'pause', 'resume', etc.
    onDeviceReady: function() {
        this.receivedEvent('deviceready');
    },

    // Update DOM on a Received Event
    receivedEvent: function(id) {
        var parentElement = document.getElementById(id);
        var listeningElement = parentElement.querySelector('.listening');
        var receivedElement = parentElement.querySelector('.received');

        listeningElement.setAttribute('style', 'display:none;');
        receivedElement.setAttribute('style', 'display:block;');

        console.log('Received Event: ' + id);
    }
<span class="err">};</span>

<span class="p">app.initialize();
</span>


+ document.getElementById('wechat').addEventListener('click', function () {
<span class="gi">+    cordova.plugins.MyToast.coolMethod('hello') 
+ })
</span></code></pre></div></div>

<p>修改完成后，然后构建项目在运行</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cordova run android
</code></pre></div></div>

<p>小菜是在android虚拟机上运行的</p>

<p><img src="http://walidream.com:9999/blogImage/mobile/mobile_1.png" alt="ssl" /></p>

:ET