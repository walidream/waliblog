I"G<p>Python也包含有 <code class="language-plaintext highlighter-rouge">集合</code> 类型。集合是由<code class="language-plaintext highlighter-rouge">不重复元素</code>组成的<code class="language-plaintext highlighter-rouge">无序</code>的集。它的基本用法包括成员检测和消除重复元素。集合对象也支持像 联合，交集，差集，对称差分等数学运算。</p>

<p>花括号或 set() 函数可以用来创建集合。注意：<code class="language-plaintext highlighter-rouge">要创建一个空集合你只能用 set() 而不能用 {}，因为后者是创建一个空字典，这种数据结构我们会在下一节进行讨论</code>。</p>

<h1 id="1集合定义">1.集合定义</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">({</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">})</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">'</span><span class="nc">set</span><span class="s">'&gt;

&gt;&gt;&gt; type({})
&lt;class '</span><span class="nb">dict</span><span class="s">'&gt;

# 定义一个空集合
&gt;&gt;&gt; aset = set()
&gt;&gt;&gt; aset
set()

# 集合不重复
&gt;&gt;&gt; set({1,2,1,2})
{1,2}

&gt;&gt;&gt; a = set('</span><span class="n">abracadabra</span><span class="s">')
&gt;&gt;&gt; a
{'</span><span class="n">d</span><span class="s">', '</span><span class="sa">b</span><span class="s">', '</span><span class="n">a</span><span class="s">', '</span><span class="sa">r</span><span class="s">', '</span><span class="n">c</span><span class="s">'}

# 列表推导式
&gt;&gt;&gt; a = {x for x in '</span><span class="n">abracadabra</span><span class="s">' if x not in '</span><span class="n">abc</span><span class="s">'}
&gt;&gt;&gt; a
{'</span><span class="sa">r</span><span class="s">', '</span><span class="n">d</span><span class="s">'}
</span></code></pre></div></div>

<h1 id="2集合方法">2.集合方法</h1>

<table>
  <thead>
    <tr>
      <th>函数名</th>
      <th>描述</th>
      <th>示例</th>
      <th>结果</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>set.update(set)</td>
      <td>更新集合</td>
      <td>aset = {1,2,3,4}<br /> aset.update({7,8})</td>
      <td>{1, 2, 3, 4, 7, 8}</td>
    </tr>
    <tr>
      <td>set.discard(obj)</td>
      <td>移除集合元素，移除不存在的元素不会报错</td>
      <td>{1,2,3,4}.discard(5)</td>
      <td>{1,2,3,4}</td>
    </tr>
    <tr>
      <td>set.remove(obj)</td>
      <td>移除不存的元素会报错</td>
      <td>{1,2,3,4}.remove(4)</td>
      <td>{1,2,3}</td>
    </tr>
    <tr>
      <td>set.pop()</td>
      <td>移除集合中最后一个元素</td>
      <td>{1,2,3}.pop()</td>
      <td>3</td>
    </tr>
    <tr>
      <td>set.add(obj)</td>
      <td>在集合中追加一个元素</td>
      <td>{1,2,3}.add(9)</td>
      <td>{1,2,3,9}</td>
    </tr>
    <tr>
      <td>set.clear()</td>
      <td>清空集合</td>
      <td>{1,2,3}.clear()</td>
      <td>{}</td>
    </tr>
  </tbody>
</table>

<h1 id="3集合操作">3.集合操作</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="mi">1</span> <span class="ow">in</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">}</span>
<span class="bp">True</span>

<span class="o">&gt;&gt;&gt;</span> <span class="mi">1</span> <span class="ow">not</span> <span class="ow">in</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">}</span>
<span class="bp">False</span>
</code></pre></div></div>

<h1 id="4交集">4.交集</h1>
<p><code class="language-plaintext highlighter-rouge">intersection</code>, <code class="language-plaintext highlighter-rouge">intersection_update</code>，也可以使用<code class="language-plaintext highlighter-rouge">a&amp;b</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">aset</span> <span class="o">=</span> <span class="p">{</span><span class="mi">11</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">33</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">bset</span> <span class="o">=</span> <span class="p">{</span><span class="mi">33</span><span class="p">,</span><span class="mi">44</span><span class="p">,</span><span class="mi">55</span><span class="p">}</span>
<span class="c1"># 取交集，赋给新值
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">aset</span><span class="p">.</span><span class="n">intersection</span><span class="p">(</span><span class="n">bset</span><span class="p">)</span> 
<span class="p">{</span><span class="mi">33</span><span class="p">}</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">aset</span>
<span class="p">{</span><span class="mi">11</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">33</span><span class="p">}</span>

<span class="c1">#取交集并更新自己
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">aset</span><span class="p">.</span><span class="n">intersection_update</span><span class="p">(</span><span class="n">bset</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">aset</span>
<span class="p">{</span><span class="mi">33</span><span class="p">}</span>

<span class="c1"># 取交集
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">aset</span> <span class="o">&amp;</span> <span class="n">bset</span>
</code></pre></div></div>

<h1 id="5并集">5.并集</h1>

<table>
  <tbody>
    <tr>
      <td>union，也可以使用a</td>
      <td>b</td>
    </tr>
  </tbody>
</table>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">aset</span> <span class="o">=</span> <span class="p">{</span><span class="mi">11</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">33</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">bset</span> <span class="o">=</span> <span class="p">{</span><span class="mi">22</span><span class="p">,</span><span class="mi">44</span><span class="p">,</span><span class="mi">55</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">aset</span><span class="p">.</span><span class="n">union</span><span class="p">(</span><span class="n">bset</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">aset</span>
<span class="p">{</span><span class="mi">33</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">22</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">tmp</span>
<span class="p">{</span><span class="mi">33</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">44</span><span class="p">}</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">aset</span> <span class="o">|</span> <span class="n">bset</span>
<span class="p">{</span><span class="mi">33</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">44</span><span class="p">}</span>
</code></pre></div></div>

<h1 id="6差集">6.差集</h1>

<p><code class="language-plaintext highlighter-rouge">difference</code>, <code class="language-plaintext highlighter-rouge">difference_update</code>，也可以使用<code class="language-plaintext highlighter-rouge">a-b</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">aset</span> <span class="o">=</span> <span class="p">{</span><span class="mi">11</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">33</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">bset</span> <span class="o">=</span> <span class="p">{</span><span class="mi">22</span><span class="p">,</span><span class="mi">55</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">aset</span><span class="p">.</span><span class="n">difference</span><span class="p">(</span><span class="n">bset</span><span class="p">)</span> <span class="c1">#找到aset中存在，bset中不存在的集合，返回新值
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">tmp</span>
<span class="p">{</span><span class="mi">33</span><span class="p">,</span> <span class="mi">11</span><span class="p">}</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">aset</span> <span class="o">-</span> <span class="n">bset</span>
<span class="p">{</span><span class="mi">33</span><span class="p">,</span> <span class="mi">11</span><span class="p">}</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">aset</span>
<span class="p">{</span><span class="mi">11</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">33</span><span class="p">}</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">tmp2</span> <span class="o">=</span> <span class="n">aset</span><span class="p">.</span><span class="n">difference_update</span><span class="p">(</span><span class="n">bset</span><span class="p">)</span> <span class="c1">#找到aset中存在，bset中不存在的集合，覆盖掉aset
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">tmp2</span> 
<span class="bp">None</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">aset</span>
<span class="p">{</span><span class="mi">33</span><span class="p">,</span><span class="mi">11</span><span class="p">}</span>
</code></pre></div></div>

<h1 id="7包含关系">7.包含关系</h1>

<p>两个集合之间一般有三种关系，相交、包含、不相交。在Python中分别用下面的方法判断：</p>
<ul>
  <li>set.isdisjoint(s)：判断两个集合是不是不相交</li>
  <li>set.issuperset(s)：判断集合是不是包含其他集合，等同于<code class="language-plaintext highlighter-rouge">a&gt;=b</code></li>
  <li>set.issubset(s)：判断集合是不是被其他集合包含，等同于<code class="language-plaintext highlighter-rouge">a&lt;=b</code></li>
</ul>

<p>如果要真包含关系，就用符号操作<code class="language-plaintext highlighter-rouge">&gt;</code>和<code class="language-plaintext highlighter-rouge">&lt;</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">aset</span> <span class="o">=</span> <span class="p">{</span><span class="mi">11</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">33</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">bset</span> <span class="o">=</span> <span class="p">{</span><span class="mi">22</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">aset</span><span class="p">.</span><span class="n">isdisjoint</span><span class="p">(</span><span class="n">bset</span><span class="p">)</span> <span class="c1">#判断是否不存在交集（有交集False，无交集True）
</span><span class="bp">False</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">aset</span><span class="p">.</span><span class="n">issubset</span><span class="p">(</span><span class="n">bset</span><span class="p">)</span> <span class="c1">#判断se是否是be的子集合
</span><span class="bp">False</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">aset</span> <span class="o">&lt;=</span> <span class="n">bset</span> 
<span class="bp">False</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">aset</span><span class="p">.</span><span class="n">issuperset</span><span class="p">(</span><span class="n">bset</span><span class="p">)</span> <span class="c1">#判断se是否是be的父集合
</span><span class="bp">True</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">aset</span> <span class="o">&gt;=</span> <span class="n">bset</span>
<span class="bp">True</span>
</code></pre></div></div>

<h1 id="8合并">8.合并</h1>

<p>symmetric_difference, symmetric_difference_update</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">aset</span> <span class="o">=</span> <span class="p">{</span><span class="mi">11</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">33</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">bset</span> <span class="o">=</span> <span class="p">{</span><span class="mi">22</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">aset</span><span class="p">.</span><span class="n">symmetric_difference</span><span class="p">(</span><span class="n">bset</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">tmp</span>
<span class="p">{</span><span class="mi">33</span><span class="p">,</span> <span class="mi">11</span><span class="p">}</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">aset</span>
<span class="p">{</span><span class="mi">33</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">22</span><span class="p">}</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">tmp2</span> <span class="o">=</span> <span class="n">aset</span><span class="p">.</span><span class="n">symmetric_difference_update</span><span class="p">(</span><span class="n">bset</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">tmp2</span>
<span class="bp">None</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">aset</span>
<span class="p">{</span><span class="mi">33</span><span class="p">,</span><span class="mi">11</span><span class="p">}</span>
</code></pre></div></div>

<h1 id="9集合转换">9.集合转换</h1>

<p>集合可以转换为list、tuple、str</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">aset</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">(</span><span class="n">aset</span><span class="p">)</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>

<span class="o">&gt;&gt;&gt;</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">aset</span><span class="p">)</span>
<span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="nb">str</span><span class="p">(</span><span class="n">aset</span><span class="p">)</span>
<span class="s">'{1, 2, 3, 4}'</span>
</code></pre></div></div>

<h1 id="10不可变集合">10.不可变集合</h1>

<p>Python提供了不能改变元素的集合的实现版本，即不能增加或删除元素，类型名叫frozenset。需要注意的是frozenset仍然可以进行集合操作，只是不能用带有update的方法。如果要一个有frozenset中的所有元素的普通集合，只需把它当作参数传入集合的构造函数中即</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">aset</span> <span class="o">=</span> <span class="nb">frozenset</span><span class="p">(</span><span class="s">"hello"</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">aset</span>
<span class="nb">frozenset</span><span class="p">({</span><span class="s">'o'</span><span class="p">,</span> <span class="s">'l'</span><span class="p">,</span> <span class="s">'h'</span><span class="p">,</span> <span class="s">'e'</span><span class="p">})</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">aset</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">aset</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">aset</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">aset</span>
<span class="p">{</span><span class="s">'l'</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="s">'e'</span><span class="p">,</span> <span class="s">'h'</span><span class="p">,</span> <span class="s">'o'</span><span class="p">}</span>
</code></pre></div></div>

:ET